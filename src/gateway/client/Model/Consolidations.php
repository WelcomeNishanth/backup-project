<?php
/**
 * Consolidations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gateway\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Gateway
 *
 * Delivery Gateway
 *
 * OpenAPI spec version: 2.16.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gateway\Client\Model;

use \ArrayAccess;

/**
 * Consolidations Class Doc Comment
 *
 * @category    Class
 * @package     Gateway\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Consolidations implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'consolidations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'consolidation_id' => 'string',
        'notification_emails' => 'string[]',
        'deliveries' => '\Gateway\Client\Model\Deliveries[]',
        'reference_ids' => '\Gateway\Client\Model\ReferenceIds',
        'caller_id' => 'string',
        'caller_email' => 'string',
        'sandbox' => 'bool',
        '_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'consolidation_id' => null,
        'notification_emails' => null,
        'deliveries' => null,
        'reference_ids' => null,
        'caller_id' => null,
        'caller_email' => null,
        'sandbox' => null,
        '_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'consolidation_id' => 'consolidationId',
        'notification_emails' => 'notificationEmails',
        'deliveries' => 'deliveries',
        'reference_ids' => 'referenceIds',
        'caller_id' => 'callerId',
        'caller_email' => 'callerEmail',
        'sandbox' => 'sandbox',
        '_id' => '_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'consolidation_id' => 'setConsolidationId',
        'notification_emails' => 'setNotificationEmails',
        'deliveries' => 'setDeliveries',
        'reference_ids' => 'setReferenceIds',
        'caller_id' => 'setCallerId',
        'caller_email' => 'setCallerEmail',
        'sandbox' => 'setSandbox',
        '_id' => 'setId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'consolidation_id' => 'getConsolidationId',
        'notification_emails' => 'getNotificationEmails',
        'deliveries' => 'getDeliveries',
        'reference_ids' => 'getReferenceIds',
        'caller_id' => 'getCallerId',
        'caller_email' => 'getCallerEmail',
        'sandbox' => 'getSandbox',
        '_id' => 'getId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consolidation_id'] = isset($data['consolidation_id']) ? $data['consolidation_id'] : null;
        $this->container['notification_emails'] = isset($data['notification_emails']) ? $data['notification_emails'] : null;
        $this->container['deliveries'] = isset($data['deliveries']) ? $data['deliveries'] : null;
        $this->container['reference_ids'] = isset($data['reference_ids']) ? $data['reference_ids'] : null;
        $this->container['caller_id'] = isset($data['caller_id']) ? $data['caller_id'] : null;
        $this->container['caller_email'] = isset($data['caller_email']) ? $data['caller_email'] : null;
        $this->container['sandbox'] = isset($data['sandbox']) ? $data['sandbox'] : null;
        $this->container['_id'] = isset($data['_id']) ? $data['_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets consolidation_id
     * @return string
     */
    public function getConsolidationId()
    {
        return $this->container['consolidation_id'];
    }

    /**
     * Sets consolidation_id
     * @param string $consolidation_id
     * @return $this
     */
    public function setConsolidationId($consolidation_id)
    {
        $this->container['consolidation_id'] = $consolidation_id;

        return $this;
    }

    /**
     * Gets notification_emails
     * @return string[]
     */
    public function getNotificationEmails()
    {
        return $this->container['notification_emails'];
    }

    /**
     * Sets notification_emails
     * @param string[] $notification_emails
     * @return $this
     */
    public function setNotificationEmails($notification_emails)
    {
        $this->container['notification_emails'] = $notification_emails;

        return $this;
    }

    /**
     * Gets deliveries
     * @return \Gateway\Client\Model\Deliveries[]
     */
    public function getDeliveries()
    {
        return $this->container['deliveries'];
    }

    /**
     * Sets deliveries
     * @param \Gateway\Client\Model\Deliveries[] $deliveries
     * @return $this
     */
    public function setDeliveries($deliveries)
    {
        $this->container['deliveries'] = $deliveries;

        return $this;
    }

    /**
     * Gets reference_ids
     * @return \Gateway\Client\Model\ReferenceIds
     */
    public function getReferenceIds()
    {
        return $this->container['reference_ids'];
    }

    /**
     * Sets reference_ids
     * @param \Gateway\Client\Model\ReferenceIds $reference_ids
     * @return $this
     */
    public function setReferenceIds($reference_ids)
    {
        $this->container['reference_ids'] = $reference_ids;

        return $this;
    }

    /**
     * Gets caller_id
     * @return string
     */
    public function getCallerId()
    {
        return $this->container['caller_id'];
    }

    /**
     * Sets caller_id
     * @param string $caller_id
     * @return $this
     */
    public function setCallerId($caller_id)
    {
        $this->container['caller_id'] = $caller_id;

        return $this;
    }

    /**
     * Gets caller_email
     * @return string
     */
    public function getCallerEmail()
    {
        return $this->container['caller_email'];
    }

    /**
     * Sets caller_email
     * @param string $caller_email
     * @return $this
     */
    public function setCallerEmail($caller_email)
    {
        $this->container['caller_email'] = $caller_email;

        return $this;
    }

    /**
     * Gets sandbox
     * @return bool
     */
    public function getSandbox()
    {
        return $this->container['sandbox'];
    }

    /**
     * Sets sandbox
     * @param bool $sandbox
     * @return $this
     */
    public function setSandbox($sandbox)
    {
        $this->container['sandbox'] = $sandbox;

        return $this;
    }

    /**
     * Gets _id
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     * @param string $_id ObjectId
     * @return $this
     */
    public function setId($_id)
    {
        $this->container['_id'] = $_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Gateway\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Gateway\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



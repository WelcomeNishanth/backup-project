<?php
/**
 * Shipments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Gateway V2
 *
 * With the Delivery Gateway, you can initiate delivery through the warehouse and satellite network.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Shipments Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Shipments implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'shipments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipment_id' => 'string',
        'broker_id' => 'string',
        'lead_time' => 'int',
        'estimated_shipment_cost' => 'int',
        'total_quoted_cost' => 'int',
        'scheduled_start_date' => '\DateTime',
        'scheduled_completion_date' => '\DateTime',
        'leg_ids' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_id' => 'shipmentId',
        'broker_id' => 'brokerId',
        'lead_time' => 'leadTime',
        'estimated_shipment_cost' => 'estimatedShipmentCost',
        'total_quoted_cost' => 'totalQuotedCost',
        'scheduled_start_date' => 'scheduledStartDate',
        'scheduled_completion_date' => 'scheduledCompletionDate',
        'leg_ids' => 'legIds'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'shipment_id' => 'setShipmentId',
        'broker_id' => 'setBrokerId',
        'lead_time' => 'setLeadTime',
        'estimated_shipment_cost' => 'setEstimatedShipmentCost',
        'total_quoted_cost' => 'setTotalQuotedCost',
        'scheduled_start_date' => 'setScheduledStartDate',
        'scheduled_completion_date' => 'setScheduledCompletionDate',
        'leg_ids' => 'setLegIds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'shipment_id' => 'getShipmentId',
        'broker_id' => 'getBrokerId',
        'lead_time' => 'getLeadTime',
        'estimated_shipment_cost' => 'getEstimatedShipmentCost',
        'total_quoted_cost' => 'getTotalQuotedCost',
        'scheduled_start_date' => 'getScheduledStartDate',
        'scheduled_completion_date' => 'getScheduledCompletionDate',
        'leg_ids' => 'getLegIds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipment_id'] = isset($data['shipment_id']) ? $data['shipment_id'] : null;
        $this->container['broker_id'] = isset($data['broker_id']) ? $data['broker_id'] : null;
        $this->container['lead_time'] = isset($data['lead_time']) ? $data['lead_time'] : null;
        $this->container['estimated_shipment_cost'] = isset($data['estimated_shipment_cost']) ? $data['estimated_shipment_cost'] : null;
        $this->container['total_quoted_cost'] = isset($data['total_quoted_cost']) ? $data['total_quoted_cost'] : null;
        $this->container['scheduled_start_date'] = isset($data['scheduled_start_date']) ? $data['scheduled_start_date'] : null;
        $this->container['scheduled_completion_date'] = isset($data['scheduled_completion_date']) ? $data['scheduled_completion_date'] : null;
        $this->container['leg_ids'] = isset($data['leg_ids']) ? $data['leg_ids'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets shipment_id
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     * @param string $shipment_id
     * @return $this
     */
    public function setShipmentId($shipment_id)
    {
        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets broker_id
     * @return string
     */
    public function getBrokerId()
    {
        return $this->container['broker_id'];
    }

    /**
     * Sets broker_id
     * @param string $broker_id
     * @return $this
     */
    public function setBrokerId($broker_id)
    {
        $this->container['broker_id'] = $broker_id;

        return $this;
    }

    /**
     * Gets lead_time
     * @return int
     */
    public function getLeadTime()
    {
        return $this->container['lead_time'];
    }

    /**
     * Sets lead_time
     * @param int $lead_time
     * @return $this
     */
    public function setLeadTime($lead_time)
    {
        $this->container['lead_time'] = $lead_time;

        return $this;
    }

    /**
     * Gets estimated_shipment_cost
     * @return int
     */
    public function getEstimatedShipmentCost()
    {
        return $this->container['estimated_shipment_cost'];
    }

    /**
     * Sets estimated_shipment_cost
     * @param int $estimated_shipment_cost
     * @return $this
     */
    public function setEstimatedShipmentCost($estimated_shipment_cost)
    {
        $this->container['estimated_shipment_cost'] = $estimated_shipment_cost;

        return $this;
    }

    /**
     * Gets total_quoted_cost
     * @return int
     */
    public function getTotalQuotedCost()
    {
        return $this->container['total_quoted_cost'];
    }

    /**
     * Sets total_quoted_cost
     * @param int $total_quoted_cost
     * @return $this
     */
    public function setTotalQuotedCost($total_quoted_cost)
    {
        $this->container['total_quoted_cost'] = $total_quoted_cost;

        return $this;
    }

    /**
     * Gets scheduled_start_date
     * @return \DateTime
     */
    public function getScheduledStartDate()
    {
        return $this->container['scheduled_start_date'];
    }

    /**
     * Sets scheduled_start_date
     * @param \DateTime $scheduled_start_date
     * @return $this
     */
    public function setScheduledStartDate($scheduled_start_date)
    {
        $this->container['scheduled_start_date'] = $scheduled_start_date;

        return $this;
    }

    /**
     * Gets scheduled_completion_date
     * @return \DateTime
     */
    public function getScheduledCompletionDate()
    {
        return $this->container['scheduled_completion_date'];
    }

    /**
     * Sets scheduled_completion_date
     * @param \DateTime $scheduled_completion_date
     * @return $this
     */
    public function setScheduledCompletionDate($scheduled_completion_date)
    {
        $this->container['scheduled_completion_date'] = $scheduled_completion_date;

        return $this;
    }

    /**
     * Gets leg_ids
     * @return string[]
     */
    public function getLegIds()
    {
        return $this->container['leg_ids'];
    }

    /**
     * Sets leg_ids
     * @param string[] $leg_ids
     * @return $this
     */
    public function setLegIds($leg_ids)
    {
        $this->container['leg_ids'] = $leg_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



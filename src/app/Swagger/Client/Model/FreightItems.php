<?php
/**
 * FreightItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Gateway V2
 *
 * With the Delivery Gateway, you can initiate delivery through the warehouse and satellite network.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FreightItems Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FreightItems implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'freightItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'freight_item_id' => 'string',
        'quantity' => 'int',
        'class_code' => 'string',
        'nmfc' => 'string',
        'dimensions' => '\Swagger\Client\Model\Dimensions',
        'weight' => '\Swagger\Client\Model\Weight',
        'product_config_id' => 'string',
        'sell_unit_per_ship_unit' => 'int',
        'price_unit_per_sel_unit' => 'int',
        'product_sell_unit' => 'int',
        'product_ship_unit' => 'int',
        'retail_price' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'freight_item_id' => 'freightItemId',
        'quantity' => 'quantity',
        'class_code' => 'classCode',
        'nmfc' => 'nmfc',
        'dimensions' => 'dimensions',
        'weight' => 'weight',
        'product_config_id' => 'productConfigId',
        'sell_unit_per_ship_unit' => 'sellUnitPerShipUnit',
        'price_unit_per_sel_unit' => 'priceUnitPerSelUnit',
        'product_sell_unit' => 'productSellUnit',
        'product_ship_unit' => 'productShipUnit',
        'retail_price' => 'retailPrice'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'freight_item_id' => 'setFreightItemId',
        'quantity' => 'setQuantity',
        'class_code' => 'setClassCode',
        'nmfc' => 'setNmfc',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'product_config_id' => 'setProductConfigId',
        'sell_unit_per_ship_unit' => 'setSellUnitPerShipUnit',
        'price_unit_per_sel_unit' => 'setPriceUnitPerSelUnit',
        'product_sell_unit' => 'setProductSellUnit',
        'product_ship_unit' => 'setProductShipUnit',
        'retail_price' => 'setRetailPrice'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'freight_item_id' => 'getFreightItemId',
        'quantity' => 'getQuantity',
        'class_code' => 'getClassCode',
        'nmfc' => 'getNmfc',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'product_config_id' => 'getProductConfigId',
        'sell_unit_per_ship_unit' => 'getSellUnitPerShipUnit',
        'price_unit_per_sel_unit' => 'getPriceUnitPerSelUnit',
        'product_sell_unit' => 'getProductSellUnit',
        'product_ship_unit' => 'getProductShipUnit',
        'retail_price' => 'getRetailPrice'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['freight_item_id'] = isset($data['freight_item_id']) ? $data['freight_item_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['class_code'] = isset($data['class_code']) ? $data['class_code'] : null;
        $this->container['nmfc'] = isset($data['nmfc']) ? $data['nmfc'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['product_config_id'] = isset($data['product_config_id']) ? $data['product_config_id'] : null;
        $this->container['sell_unit_per_ship_unit'] = isset($data['sell_unit_per_ship_unit']) ? $data['sell_unit_per_ship_unit'] : null;
        $this->container['price_unit_per_sel_unit'] = isset($data['price_unit_per_sel_unit']) ? $data['price_unit_per_sel_unit'] : null;
        $this->container['product_sell_unit'] = isset($data['product_sell_unit']) ? $data['product_sell_unit'] : null;
        $this->container['product_ship_unit'] = isset($data['product_ship_unit']) ? $data['product_ship_unit'] : null;
        $this->container['retail_price'] = isset($data['retail_price']) ? $data['retail_price'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets freight_item_id
     * @return string
     */
    public function getFreightItemId()
    {
        return $this->container['freight_item_id'];
    }

    /**
     * Sets freight_item_id
     * @param string $freight_item_id
     * @return $this
     */
    public function setFreightItemId($freight_item_id)
    {
        $this->container['freight_item_id'] = $freight_item_id;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets class_code
     * @return string
     */
    public function getClassCode()
    {
        return $this->container['class_code'];
    }

    /**
     * Sets class_code
     * @param string $class_code
     * @return $this
     */
    public function setClassCode($class_code)
    {
        $this->container['class_code'] = $class_code;

        return $this;
    }

    /**
     * Gets nmfc
     * @return string
     */
    public function getNmfc()
    {
        return $this->container['nmfc'];
    }

    /**
     * Sets nmfc
     * @param string $nmfc
     * @return $this
     */
    public function setNmfc($nmfc)
    {
        $this->container['nmfc'] = $nmfc;

        return $this;
    }

    /**
     * Gets dimensions
     * @return \Swagger\Client\Model\Dimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     * @param \Swagger\Client\Model\Dimensions $dimensions
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight
     * @return \Swagger\Client\Model\Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param \Swagger\Client\Model\Weight $weight
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets product_config_id
     * @return string
     */
    public function getProductConfigId()
    {
        return $this->container['product_config_id'];
    }

    /**
     * Sets product_config_id
     * @param string $product_config_id
     * @return $this
     */
    public function setProductConfigId($product_config_id)
    {
        $this->container['product_config_id'] = $product_config_id;

        return $this;
    }

    /**
     * Gets sell_unit_per_ship_unit
     * @return int
     */
    public function getSellUnitPerShipUnit()
    {
        return $this->container['sell_unit_per_ship_unit'];
    }

    /**
     * Sets sell_unit_per_ship_unit
     * @param int $sell_unit_per_ship_unit
     * @return $this
     */
    public function setSellUnitPerShipUnit($sell_unit_per_ship_unit)
    {
        $this->container['sell_unit_per_ship_unit'] = $sell_unit_per_ship_unit;

        return $this;
    }

    /**
     * Gets price_unit_per_sel_unit
     * @return int
     */
    public function getPriceUnitPerSelUnit()
    {
        return $this->container['price_unit_per_sel_unit'];
    }

    /**
     * Sets price_unit_per_sel_unit
     * @param int $price_unit_per_sel_unit
     * @return $this
     */
    public function setPriceUnitPerSelUnit($price_unit_per_sel_unit)
    {
        $this->container['price_unit_per_sel_unit'] = $price_unit_per_sel_unit;

        return $this;
    }

    /**
     * Gets product_sell_unit
     * @return int
     */
    public function getProductSellUnit()
    {
        return $this->container['product_sell_unit'];
    }

    /**
     * Sets product_sell_unit
     * @param int $product_sell_unit
     * @return $this
     */
    public function setProductSellUnit($product_sell_unit)
    {
        $this->container['product_sell_unit'] = $product_sell_unit;

        return $this;
    }

    /**
     * Gets product_ship_unit
     * @return int
     */
    public function getProductShipUnit()
    {
        return $this->container['product_ship_unit'];
    }

    /**
     * Sets product_ship_unit
     * @param int $product_ship_unit
     * @return $this
     */
    public function setProductShipUnit($product_ship_unit)
    {
        $this->container['product_ship_unit'] = $product_ship_unit;

        return $this;
    }

    /**
     * Gets retail_price
     * @return int
     */
    public function getRetailPrice()
    {
        return $this->container['retail_price'];
    }

    /**
     * Sets retail_price
     * @param int $retail_price
     * @return $this
     */
    public function setRetailPrice($retail_price)
    {
        $this->container['retail_price'] = $retail_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



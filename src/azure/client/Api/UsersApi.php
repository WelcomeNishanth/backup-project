<?php
/**
 * UsersApi
 * PHP version 5
 *
 * @category Class
 * @package  Azure\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Azure API management APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Azure\Client\Api;

use \Azure\Client\ApiClient;
use \Azure\Client\ApiException;
use \Azure\Client\Configuration;
use \Azure\Client\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  Azure\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersApi
{
    /**
     * API Client
     *
     * @var \Azure\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Azure\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Azure\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Azure\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Azure\Client\ApiClient $apiClient set the API client
     *
     * @return UsersApi
     */
    public function setApiClient(\Azure\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation userCreate
     *
     * @param string $user_id  (required)
     * @param string $api_version  (required)
     * @param \Azure\Client\Model\User $user  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return void
     */
    public function userCreate($user_id, $api_version, $user)
    {
        list($response) = $this->userCreateWithHttpInfo($user_id, $api_version, $user);
        return $response;
    }

    /**
     * Operation userCreateWithHttpInfo
     *
     * @param string $user_id  (required)
     * @param string $api_version  (required)
     * @param \Azure\Client\Model\User $user  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCreateWithHttpInfo($user_id, $api_version, $user)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userCreate');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling userCreate');
        }
        // verify the required parameter 'invoice' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice when calling userCreate');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{user_id}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userCreateSubscription
     *
     * @param string $subscription_id  (required)
     * @param string $api_version  (required)
     * @param \Azure\Client\Model\Subscription $subscription  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return void
     */
    public function userCreateSubscription($subscription_id, $api_version, $subscription)
    {
        list($response) = $this->userCreateSubscriptionWithHttpInfo($subscription_id, $api_version, $subscription);
        return $response;
    }

    /**
     * Operation userCreateSubscriptionWithHttpInfo
     *
     * @param string $subscription_id  (required)
     * @param string $api_version  (required)
     * @param \Azure\Client\Model\Subscription $subscription  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCreateSubscriptionWithHttpInfo($subscription_id, $api_version, $subscription)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling userCreateSubscription');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling userCreateSubscription');
        }
        // verify the required parameter 'customer' is set
        if ($subscription === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer when calling userCreateSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscription_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($subscription)) {
            $_tempBody = $subscription;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/subscriptions/{subscription_id}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userGet
     *
     * @param string $user_id  (required)
     * @param string $api_version  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return \Azure\Client\Model\User
     */
    public function userGet($user_id, $api_version)
    {
        list($response) = $this->userGetWithHttpInfo($user_id, $api_version);
        return $response;
    }

    /**
     * Operation userGetWithHttpInfo
     *
     * @param string $user_id  (required)
     * @param string $api_version  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return array of \Azure\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function userGetWithHttpInfo($user_id, $api_version)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userGet');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling userGet');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Azure\Client\Model\User',
                '/users/{user_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Azure\Client\Model\User', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Azure\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userGetSubscription
     *
     * @param string $subscription_id  (required)
     * @param string $api_version  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return \Azure\Client\Model\Subscription
     */
    public function userGetSubscription($subscription_id, $api_version)
    {
        list($response) = $this->userGetSubscriptionWithHttpInfo($subscription_id, $api_version);
        return $response;
    }

    /**
     * Operation userGetSubscriptionWithHttpInfo
     *
     * @param string $subscription_id  (required)
     * @param string $api_version  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return array of \Azure\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function userGetSubscriptionWithHttpInfo($subscription_id, $api_version)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling userGetSubscription');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling userGetSubscription');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscription_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Azure\Client\Model\Subscription',
                '/subscriptions/{subscription_id}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Azure\Client\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userRegeneratePrimaryKey
     *
     * @param string $subscription_id  (required)
     * @param string $api_version  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return void
     */
    public function userRegeneratePrimaryKey($subscription_id, $api_version)
    {
        list($response) = $this->userRegeneratePrimaryKeyWithHttpInfo($subscription_id, $api_version);
        return $response;
    }

    /**
     * Operation userRegeneratePrimaryKeyWithHttpInfo
     *
     * @param string $subscription_id  (required)
     * @param string $api_version  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRegeneratePrimaryKeyWithHttpInfo($subscription_id, $api_version)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling userRegeneratePrimaryKey');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling userRegeneratePrimaryKey');
        }
        // parse inputs
        $resourcePath = "/subscriptions/{subscription_id}/regeneratePrimaryKey";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/subscriptions/{subscription_id}/regeneratePrimaryKey'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation userUpdate
     *
     * @param string $user_id  (required)
     * @param string $api_version  (required)
     * @param \Azure\Client\Model\User $user  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return void
     */
    public function userUpdate($user_id, $api_version, $user)
    {
        list($response) = $this->userUpdateWithHttpInfo($user_id, $api_version, $user);
        return $response;
    }

    /**
     * Operation userUpdateWithHttpInfo
     *
     * @param string $user_id  (required)
     * @param string $api_version  (required)
     * @param \Azure\Client\Model\User $user  (required)
     * @throws \Azure\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUpdateWithHttpInfo($user_id, $api_version, $user)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userUpdate');
        }
        // verify the required parameter 'api_version' is set
        if ($api_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_version when calling userUpdate');
        }
        // verify the required parameter 'invoice' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice when calling userUpdate');
        }
        // parse inputs
        $resourcePath = "/users/{user_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($api_version !== null) {
            $queryParams['api-version'] = $this->apiClient->getSerializer()->toQueryValue($api_version);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "user_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{user_id}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}

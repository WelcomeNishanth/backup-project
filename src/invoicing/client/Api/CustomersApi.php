<?php
/**
 * CustomersApi
 * PHP version 5
 *
 * @category Class
 * @package  Invoicing\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gateway Invoicing APIs
 *
 * With the Invoicing APIs, you can create, get and update Customers and Invoices in Netsuite through REST APIs. This is a wrapper around NetSuite SOAP APIs and built for Gateway Invoicing requirements.
 *
 * OpenAPI spec version: 1.0
 * Contact: apiteam@builddirect.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Invoicing\Client\Api;

use \Invoicing\Client\ApiClient;
use \Invoicing\Client\ApiException;
use \Invoicing\Client\Configuration;
use \Invoicing\Client\ObjectSerializer;

/**
 * CustomersApi Class Doc Comment
 *
 * @category Class
 * @package  Invoicing\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomersApi
{
    /**
     * API Client
     *
     * @var \Invoicing\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Invoicing\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Invoicing\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Invoicing\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Invoicing\Client\ApiClient $apiClient set the API client
     *
     * @return CustomersApi
     */
    public function setApiClient(\Invoicing\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation customerCreate
     *
     * @param \Invoicing\Client\Model\Customer $customer The Customer info to be created. (required)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return void
     */
    public function customerCreate($customer)
    {
        list($response) = $this->customerCreateWithHttpInfo($customer);
        return $response;
    }

    /**
     * Operation customerCreateWithHttpInfo
     *
     * @param \Invoicing\Client\Model\Customer $customer The Customer info to be created. (required)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreateWithHttpInfo($customer)
    {
        // verify the required parameter 'customer' is set
        if ($customer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer when calling customerCreate');
        }
        // parse inputs
        $resourcePath = "/customers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/customers'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customerGet
     *
     * @param int $customer_id Netsuite Customer Internal Id. (required)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return void
     */
    public function customerGet($customer_id)
    {
        list($response) = $this->customerGetWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customerGetWithHttpInfo
     *
     * @param int $customer_id Netsuite Customer Internal Id. (required)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerGet');
        }
        // parse inputs
        $resourcePath = "/customers/{customerId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/customers/{customerId}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customerGetAll
     *
     * @param int $customer_id Netsuite Customer Internal Id.  Either API Key or Netsuite Customer Internal Id is required. (optional)
     * @param string $api_key User&#39;s API key. Either API Key or Netsuite Customer Internal Id is required. (optional)
     * @param int $page_size Number of results to be retrieved per page.  This has to be &gt; 5 and &lt; 1000 as per limitations of NetSuite. (optional)
     * @param string $search_id Netsuite Search ID.  This could be returned in the first batch of results response. (optional)
     * @param int $page_index Page Index of the search resulrs to be retrieved. (optional)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return void
     */
    public function customerGetAll($customer_id = null, $api_key = null, $page_size = null, $search_id = null, $page_index = null)
    {
        list($response) = $this->customerGetAllWithHttpInfo($customer_id, $api_key, $page_size, $search_id, $page_index);
        return $response;
    }

    /**
     * Operation customerGetAllWithHttpInfo
     *
     * @param int $customer_id Netsuite Customer Internal Id.  Either API Key or Netsuite Customer Internal Id is required. (optional)
     * @param string $api_key User&#39;s API key. Either API Key or Netsuite Customer Internal Id is required. (optional)
     * @param int $page_size Number of results to be retrieved per page.  This has to be &gt; 5 and &lt; 1000 as per limitations of NetSuite. (optional)
     * @param string $search_id Netsuite Search ID.  This could be returned in the first batch of results response. (optional)
     * @param int $page_index Page Index of the search resulrs to be retrieved. (optional)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerGetAllWithHttpInfo($customer_id = null, $api_key = null, $page_size = null, $search_id = null, $page_index = null)
    {
        // parse inputs
        $resourcePath = "/customers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // query params
        if ($search_id !== null) {
            $queryParams['searchId'] = $this->apiClient->getSerializer()->toQueryValue($search_id);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = $this->apiClient->getSerializer()->toQueryValue($page_index);
        }
        // header params
        if ($customer_id !== null) {
            $headerParams['customerId'] = $this->apiClient->getSerializer()->toHeaderValue($customer_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['apiKey'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/customers'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation customerUpdate
     *
     * @param int $customer_id Netsuite Customer Internal Id. (required)
     * @param \Invoicing\Client\Model\Customer $customer The Customer info to be created. (required)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return void
     */
    public function customerUpdate($customer_id, $customer)
    {
        list($response) = $this->customerUpdateWithHttpInfo($customer_id, $customer);
        return $response;
    }

    /**
     * Operation customerUpdateWithHttpInfo
     *
     * @param int $customer_id Netsuite Customer Internal Id. (required)
     * @param \Invoicing\Client\Model\Customer $customer The Customer info to be created. (required)
     * @throws \Invoicing\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerUpdateWithHttpInfo($customer_id, $customer)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerUpdate');
        }
        // verify the required parameter 'customer' is set
        if ($customer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer when calling customerUpdate');
        }
        // parse inputs
        $resourcePath = "/customers/{customerId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($customer)) {
            $_tempBody = $customer;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/customers/{customerId}'
            );

            return [$response, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}